apiVersion: v1
kind: Service
metadata:
  name: haproxy-service
  namespace: securetransport
  labels:
    run: haproxy
spec:
  type: NodePort
  ports:
    - port: 8444
      targetPort: 8444
      nodePort:  31520 # Add port in range from 30000 - 32767
      protocol: TCP
      name: admin
    - port: 8022
      targetPort: 8022
      nodePort:  31522 # Add port in range from 30000 - 32767
      protocol: TCP
      name: ssh
    - port: 8404
      targetPort: 8404
      nodePort:   31521 # Add port in range from 30000 - 32767
      protocol: TCP
      name: stats
  selector:
    run: haproxy
---
apiVersion: v1
kind: Service
metadata:
  name: haproxy
  namespace: securetransport
  labels:
    run: haproxy
spec:
  clusterIP: None
  ports:
    - port: 8444
      targetPort: 8444
      protocol: TCP
      name: admin
  selector:
    run: haproxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: haproxy
  namespace: securetransport
  labels:
    k8s-app: haproxy
    run: haproxy
spec:
  selector:
    matchLabels:
      run: haproxy
  template:
    metadata:
      labels:
        run: haproxy
    spec:
      containers:
        - name: haproxy
          image: haproxy:latest
          volumeMounts:
            - name: secret-volume
              mountPath: "/usr/local/etc/haproxy/"
              readOnly: true
      volumes:
        - name: secret-volume
          secret:
            secretName: haproxy-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: securetransport
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:12.6
          imagePullPolicy: "IfNotPresent"
          args: ["-N", "1000", "-c", "autovacuum=on"]
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: "postgres"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "postgres"
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d
              name: postgres-initdb
      volumes:
        - name: postgres-initdb
          secret:
            secretName: postgres-secret
---
apiVersion: v1
kind: Service
metadata:
  name: postgre-hs
  namespace: securetransport
  labels:
    app: postgres
spec:
  clusterIP: None
  ports:
    - port: 8445
      name: dbs
      protocol: TCP
  selector:
    app: postgres
---
apiVersion: v1
kind: Service
metadata:
  name: st-server-be
  namespace: securetransport
  labels:
    run: st-server-be
spec:
  clusterIP: None
  ports:
    - port: 8444
      name: adminc
      protocol: TCP
  selector:
    run: st-server-be
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: st-server-be
  namespace: securetransport
spec:
  serviceName: "st-server-be"
  selector:
    matchLabels:
      run: st-server-be
  replicas: 1
  template:
    metadata:
      labels:
        run: st-server-be
    spec:
      containers:
        - name: st-server-be
          image: <st-server image> #replace this with your own image
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 4
              memory: 8Gi
            limits:
              cpu: 4
              memory: 8Gi
          readinessProbe:
            exec:
              command:
                - /home/stuser/Axway/SecureTransport/bin/readiness_check.sh
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            exec:
              command:
                - /home/stuser/Axway/SecureTransport/bin/liveness_check.sh
            initialDelaySeconds: 180
            failureThreshold: 3
            periodSeconds: 15
          env:
            - name: ST_CONTAINER_CONFIG_PATH
              value: "/home/stuser/Axway/SecureTransport/docker/tmp"
            - name: ST_CORE_LICENSE
              value: "/home/stuser/Axway/SecureTransport/docker/tmp/st.license"
            - name: ST_FEATURE_LICENSE
              value: "/home/stuser/Axway/SecureTransport/docker/tmp/filedrive.license"
            - name: ST_START_SCRIPTS_CONF_PATH
              value: /home/stuser/Axway/SecureTransport/docker/tmp/STStartScriptsConfig
            - name: ST_GLOBAL_CONFIG_PATH
              value: /home/stuser/Axway/SecureTransport/docker/tmp/STGlobalConfig.properties
          volumeMounts:
            - name: secret-volume
              mountPath: "/home/stuser/Axway/SecureTransport/docker/tmp"
              readOnly: true
      volumes:
        - name: secret-volume
          secret:
            secretName: st-server-secret